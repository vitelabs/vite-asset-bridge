// SPDX-License-Identifier: GPL-3.0

pragma soliditypp >=0.8.0;


interface IVault {
    function spent(bytes32 _hash) external view returns (bool);

    function input(
        uint256 id,
        bytes calldata dest,
        uint256 value
    ) external payable;

    function output(
        uint256 id,
        bytes32 outputHash,
        address payable dest,
        uint256 value
    ) external;

    function newChannel(vitetoken _erc20, address[] memory _keepers, uint8 _threshold, int8 _decimalDiff, uint256 _minValue, uint256 _maxValue)
        external
        returns (uint256);
}



struct Channel {
    uint256 inputId;
    bytes32 inputHash;
    uint256 outputId;
    bytes32 outputHash;

    int8 decimalDiff; // decimal - oppositeDecimal
    uint256 minValue;
    uint256 maxValue;
    vitetoken erc20;
    uint256 keeperId;
    bool status; // 0: abandoned 1: in use
}

struct MultiSigKeeper {
    uint8 threshold;
    address[] keeperArr;
    mapping(address=>bool) keepers;
    mapping(bytes32 => uint8) approvedCnt;
    mapping(bytes32 =>mapping(address=>bool)) approvedKeepers;
}

contract Vault is IVault {
    address private owner;
    Channel[] public channels;

    uint256 public numKeepers;
    mapping(uint256 => MultiSigKeeper) public keepers;
    mapping(bytes32 => bool) public spentHashes;

    event LogChannelsAddition(uint256 indexed id, vitetoken indexed token);
    event KeepersAddition(uint256 indexed id);
    event Input(
        uint256 channelId,
        uint256 index,
        bytes32 inputHash,
        bytes dest,
        uint256 value,
        address from
    );
    event Output(uint256 channelId, uint256 index, bytes32 outputHash, address dest, uint256 value);

    modifier ownerOnly() {
        require(owner == msg.sender, "Caller is not owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function numChannels() public view returns (uint256){
        return channels.length;
    }

    function infoKeepers(uint256 i) public view returns(uint256, address[] memory){
       return (keepers[i].threshold, keepers[i].keeperArr);
    }

    function spent(bytes32 _hash) public view override returns (bool) {
        return spentHashes[_hash];
    }

    function newChannel(vitetoken _erc20, address[] memory _keepers, uint8 _threshold, int8 _decimalDiff, uint256 _minValue, uint256 _maxValue)
        public
        override
        ownerOnly
        returns (uint256)
    {
        bytes32 _inputHash = keccak256(
            abi.encodePacked(uint256(0), accountheight(), channels.length, _erc20)
        );
        bytes32 _outputHash = keccak256(
            abi.encodePacked(uint256(1), accountheight(), channels.length, _erc20)
        );

        uint256 keeperId = newKeepers(_keepers, _threshold);

        return newChannelWithHash(_erc20, _inputHash, _outputHash, keeperId, _decimalDiff, _minValue, _maxValue);
    }

    function newKeepers(address[] memory _keepers, uint8 _threshold) public ownerOnly returns(uint256) {
        MultiSigKeeper storage r = keepers[numKeepers];
        r.threshold = _threshold;
        uint256 len = _keepers.length;
        require(len >= _threshold, "threshold required");
        for (uint256 i = 0; i < len; i++) {
            r.keepers[_keepers[i]] = true;
        }
        r.keeperArr = _keepers;
        emit KeepersAddition(numKeepers);
        return numKeepers++;
    }

    function newChannelWithHash(
        vitetoken _erc20,
        bytes32 _inputHash,
        bytes32 _outputHash,
        uint256 _keeperId,
        int8 _decimalDiff, 
        uint256 _minValue, 
        uint256 _maxValue
    ) public ownerOnly returns (uint256) {
        channels.push(
            Channel({
                inputId: 0,
                inputHash: _inputHash,
                outputId: 0,
                outputHash: _outputHash,
                decimalDiff: _decimalDiff,
                minValue: _minValue,
                maxValue: _maxValue,
                erc20: _erc20,
                keeperId:_keeperId,
                status: true
            })
        );
        requireAndUpdateSpentHashes(_inputHash);
        requireAndUpdateSpentHashes(_outputHash);
        require(_keeperId<numKeepers, "keeperId required");

        emit LogChannelsAddition(channels.length - 1, _erc20);
        return channels.length;
    }

    function input(
        uint256 id,
        bytes calldata dest,
        uint256 value
    ) public payable override {
        Channel memory channel = channels[id];

		require(channel.status, "the channel is abandoned!");
		require(msg.value == value, "Transfer Value Require Failed.");
		require(msg.token == channel.erc20, "Transfer Token Require Failed");
        require(value >= channel.minValue && value <= channel.maxValue, "value is illegal");

        int8 decimalDiff = channel.decimalDiff;
        uint8 decimalDiffAbs = abs(decimalDiff);
        if (decimalDiff >= 0) {
            require(value >= (10 ** decimalDiffAbs), "min value required");
        }

        bytes32 nextHash = keccak256(
            abi.encodePacked(channel.inputId, dest, value, channel.inputHash)
        );

        requireAndUpdateSpentHashes(nextHash);

        emit Input(id, channel.inputId + 1, nextHash, dest, value, msg.sender);
        channels[id].inputId = channel.inputId + 1;
        channels[id].inputHash = nextHash;
    }

    function output(
        uint256 id,
        bytes32 outputHash,
        address payable dest,
        uint256 value
    ) public override {
        _output(id, outputHash, dest, value);
    }

     function _output(
        uint256 id,
        bytes32 outputHash,
        address payable dest,
        uint256 value
    ) internal {
        Channel memory channel = channels[id];

        bytes32 nextHash = keccak256(
            abi.encodePacked(channel.outputId, dest, value, channel.outputHash)
        );
        // bytes32 nextId = keccak256(abi.encodePacked(dest));
        require(nextHash == outputHash, "hash verify failed");

        approved(channel.keeperId, outputHash);

        requireAndUpdateSpentHashes(nextHash);

        int8 decimalDiff = channel.decimalDiff;
        uint8 decimalDiffAbs = abs(decimalDiff);
        if (decimalDiff <= 0) {
            value = value / (10 ** decimalDiffAbs);
        } else {
            value = value * (10 ** decimalDiffAbs);
        }

      	dest.transfer(channel.erc20, value);

        emit Output(id, channel.outputId + 1, nextHash, dest, value);
        channels[id].outputId = channel.outputId + 1;
        channels[id].outputHash = nextHash;
    }

    function requireAndUpdateSpentHashes(bytes32 _hash) internal {
        require(!spentHashes[_hash], "spent hash verify failed");
        spentHashes[_hash] = true;
    }

    function abs(int8 x) public pure returns (uint8) {
        return x >= 0 ? uint8(x) : uint8(-x);
    }

    event Approved(bytes32 outputHash);

    function approved(uint256 keeperId, bytes32 outputHash) internal view {
        require(keepers[keeperId].approvedCnt[outputHash]>=keepers[keeperId].threshold, "revert outputHash approved");
    }

    function approveOutput(uint256 keeperId, bytes32 outputHash) public {
        _approveOutput(keeperId, outputHash);
    }

    function approveAndExecOutput(uint256 keeperId, uint256 id, bytes32 outputHash, address payable dest, uint256 value) public {
        _approveOutput(keeperId, outputHash);
        if(keepers[keeperId].approvedCnt[outputHash]<keepers[keeperId].threshold){
            return;
        }
        if(spentHashes[outputHash]){
            return;
        }
        _output(id, outputHash, dest, value);
    }

    function _approveOutput(uint256 keeperId, bytes32 outputHash) internal {
        require(keepers[keeperId].keepers[msg.sender], "only keeper can approve");
        require(keepers[keeperId].approvedKeepers[outputHash][msg.sender]==false, "only can approve once");

        keepers[keeperId].approvedCnt[outputHash] = keepers[keeperId].approvedCnt[outputHash] + uint8(1);
        keepers[keeperId].approvedKeepers[outputHash][msg.sender] = true;
        emit Approved(outputHash);
    }

    function outputApproved(uint256 keeperId, bytes32 outputHash, address keeper) public view returns(bool){
        return keepers[keeperId].approvedKeepers[outputHash][keeper];
    }

    function abandonChannel(uint256 id) public {
        Channel storage channel = channels[id];
        channel.status = false;
    }


    // ------------------------

    event InputProved(uint256 indexed channelId, bytes32 indexed inputHash,  bytes32 sigR, bytes32 sigS, uint8 sigV);

    mapping(bytes32 => mapping(address => bool)) public inputProvedKeepers;

    function proveInputHash(
        uint8 sigV,
        bytes32 sigR,
        bytes32 sigS,
        bytes32 inputHash,
        uint256 channelId
    ) public {
        require(inputProvedKeepers[inputHash][msg.sender]==false, "only can approve once");

        inputProvedKeepers[inputHash][msg.sender] = true;
        emit InputProved(channelId, inputHash, sigR, sigS, sigV);
    }
}
